import { todos } from "./todo.js";

// Filter for deletions
function getExportableTodos() {
    return todos.filter(todo => !todo.deleted);
}

// JSON output
export function exportAsJSON() {
    const dataStr = JSON.stringify(getExportableTodos(), null, 2);
    const blob = new Blob([dataStr], { type: "application/json" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "todos.json";
    a.click();
    URL.revokeObjectURL(url);
}

// CSV output
export function exportAsCSV() {
    const rows = [["Ø¹Ù†ÙˆØ§Ù†", "ØªÙˆØ¶ÛŒØ­Ø§Øª", "Ø³Ø®ØªÛŒ", "Ø±Ù†Ú¯", "Ø§Ù†Ø¬Ø§Ù…â€ŒØ´Ø¯Ù‡"]];
    getExportableTodos().forEach(todo => {
        rows.push([
            `"${todo.text}"`,
            `"${todo.description || ""}"`,
            todo.difficulty,
            todo.color,
            todo.completed ? "Ø¨Ù„Ù‡" : "Ø®ÛŒØ±"
        ]);
    });

    const csvContent = rows.map(r => r.join(",")).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "todos.csv";
    a.click();
    URL.revokeObjectURL(url);
}

// PDF output
export function exportAsPDF() {
    const { jsPDF } = window.jspdf; // ðŸ‘ˆ Ø­Ø§Ù„Ø§ Ø¨Ù‡ jsPDF Ø¯Ø³ØªØ±Ø³ÛŒ Ø¯Ø§Ø±ÛŒ

    const doc = new jsPDF();
    doc.setFont("helvetica");
    doc.setFontSize(12);

    const todosToExport = getExportableTodos();
    let y = 10;

    todosToExport.forEach((todo, index) => {
        doc.text(`${index + 1}. ${todo.text}`, 10, y);
        y += 7;
        if (todo.description) {
            doc.text(`ØªÙˆØ¶ÛŒØ­: ${todo.description}`, 15, y);
            y += 7;
        }
        doc.text(
            `Ø³Ø®ØªÛŒ: ${todo.difficulty} | Ø±Ù†Ú¯: ${todo.color || "Ù†Ø¯Ø§Ø±Ø¯"} | Ø§Ù†Ø¬Ø§Ù… Ø´Ø¯Ù‡: ${todo.completed ? "Ø¨Ù„Ù‡" : "Ø®ÛŒØ±"
            }`,
            15,
            y
        );
        y += 10;
    });

    doc.save("todos.pdf");
}
